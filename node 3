// ticketBooking.js

const express = require('express');
const app = express();
const PORT = 3000;

app.use(express.json());

// Seat states: available, locked, booked
let seats = [
    { id: 1, status: 'available', lockExpires: null },
    { id: 2, status: 'available', lockExpires: null },
    { id: 3, status: 'available', lockExpires: null },
    { id: 4, status: 'available', lockExpires: null },
    { id: 5, status: 'available', lockExpires: null }
];

// Helper function to clean expired locks
function cleanExpiredLocks() {
    const now = Date.now();
    seats.forEach(seat => {
        if (seat.status === 'locked' && seat.lockExpires < now) {
            seat.status = 'available';
            seat.lockExpires = null;
        }
    });
}

// GET available seats
app.get('/seats', (req, res) => {
    cleanExpiredLocks();
    const availableSeats = seats.filter(seat => seat.status === 'available');
    res.json({ availableSeats });
});

// POST lock a seat
app.post('/seats/lock', (req, res) => {
    cleanExpiredLocks();
    const { seatId } = req.body;
    const seat = seats.find(s => s.id === seatId);

    if (!seat) return res.status(404).json({ error: 'Seat not found' });

    if (seat.status === 'available') {
        seat.status = 'locked';
        seat.lockExpires = Date.now() + 60 * 1000; // 1 minute lock
        res.json({ message: `Seat ${seatId} locked for 1 minute` });
    } else if (seat.status === 'locked') {
        res.status(400).json({ error: 'Seat already locked' });
    } else {
        res.status(400).json({ error: 'Seat already booked' });
    }
});

// POST confirm booking
app.post('/seats/book', (req, res) => {
    cleanExpiredLocks();
    const { seatId } = req.body;
    const seat = seats.find(s => s.id === seatId);

    if (!seat) return res.status(404).json({ error: 'Seat not found' });

    if (seat.status === 'locked') {
        seat.status = 'booked';
        seat.lockExpires = null;
        res.json({ message: `Seat ${seatId} successfully booked` });
    } else if (seat.status === 'available') {
        res.status(400).json({ error: 'Seat is not locked. Lock before booking.' });
    } else {
        res.status(400).json({ error: 'Seat already booked' });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});
